const { OpenAI } = require("openai");
const axios = require("axios");
const moment = require("moment-timezone");
const FunctionCallingPrompt = require("../models/function_calling_prompt");
require("dotenv").config();
const config = {
  apiKey: process.env.OpenAI_API,
};

const openai = new OpenAI(config);

const savePrompt = async (name, message, extra, session) => {
  try {
    const date = new Date();
    const prompt = {
      name,
      time: `${date.getDate()}/${date.getMonth()}/${date.getFullYear()} ${
        date.getHours()
      }:${date.getMinutes()}`,
      message,
    };
    if (extra) {
      prompt.extra = "Generated by, OpenAI";
    }
    const functionCallingPromptCollection = await new FunctionCallingPrompt(prompt);
    const functionCallingPrompt = await functionCallingPromptCollection.save({session});
    return functionCallingPrompt;
  } catch (err) {
    throw err;
  }
};

const getAllPrompt = async (session) => {
  try {
    const functionCallingPrompts = await FunctionCallingPrompt.find().session(session).lean();
    if (functionCallingPrompts) {
      return functionCallingPrompts;
    } else {
      return [];
    }
  } catch (err) {
    throw err;
  }
};

const lookUpTime = async (location) => {
  try {
    const response = await axios.get(`http://worldtimeapi.org/api/timezone/${location}`);
    const { datetime } = response.data;
    const dateTime = moment.tz(datetime, location);
    const formattedString = `The current time in ${location} is ${dateTime}`;
    return formattedString;
  } catch (err) {
    throw err;
  }
}

const completionHandler = async (model, messages) => {
  const completion = await openai.chat.completions.create({
    model,
    messages,
    max_tokens: 1000,
    temperature: 0.9,
    tools: [
      {
        type: "function",
        function: {
          name: "lookUpTime",
          description: "get the current time in a given location",
          parameters: {
            type: "object",
            properties: {
              location: {
                type: "string",
                description: "the location e.g. Islamabad, Pakistan. But it should be written in a timezone like Europe/Paris"
              }
            },
            required: ["location"]
          }
        }
      }
    ],
    tool_choice: "auto"
  });
  return completion;
};

const runPrompt = async (systemPrompt, mainPrompt, session) => {
  const messages = [
    { role: "system", content: `${systemPrompt}` },
    { role: "user", content: `${mainPrompt}` },
  ];
  try {
    const userPrompt = await savePrompt("Me", mainPrompt, false, session);
    const completion = await completionHandler("gpt-3.5-turbo", messages);
    const reason = completion.choices[0].finish_reason;
    const responseMessage = completion.choices[0].message;
    // messages.push(completion.choices[0].message);

    if (responseMessage.tool_calls) {
      messages.push(responseMessage);
      const params = JSON.parse(completion.choices[0].message.tool_calls[0].function.arguments);
      const time = await lookUpTime(params.location);

      messages.push({
        tool_call_id: responseMessage.tool_calls[0].id,
        role: "tool",
        name: "lookUpTime",
        content: time
      });
      const nextCompletion = await completionHandler("gpt-3.5-turbo", messages);
      const sentence = nextCompletion.choices[0].message.content;
      const botPrompt = await savePrompt("Bot", sentence, true, session);
      return botPrompt;
    } else {
      const sentence = completion.choices[0].message.content;
      const botPrompt = await savePrompt("Bot", sentence, true, session);
      return botPrompt;
    }
  } catch (err) {
    throw err;
  }
};


module.exports = {
  getAllPrompt,
  runPrompt,
};